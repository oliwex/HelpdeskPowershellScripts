
1.	Podstawowe parametry sprzętowe
	a.	Wielkość pamięci RAM wyrażona w GB
	b.	Nazwa i typ procesora
	c.	Pojemność dysku wyrażona w GB
	d.	Karta graficzna wraz z pamięcią
2.	Konfiguracje kwot dyskowych
	a.	Przydział 10GB dla użytkownika
3.	Zainstalowane programy:
	a.	7zip
	b.	Adobe Reader
	c.	Notepad++
	d.	Przeglądarkę np. Edge lub Chrome
	e.	Java Update
4.	Listę udziałów sieciowych dostępnych dla użytkownika
	a.	Udział sieciowy departamentu do którego należy użytkownik
	b.	Udział sieciowy użytkownika
5.	Informacje o połączeniach sieciowych
	a.	adres serwera DHCP
	b.	adres serwera DNS
	c.	Podstawowa adresacja sieciowa(Adres IPv4, Maska podsieci, brama domyślna)
6.	Listę podłączonych drukarek użytkowników
	a.	Czy użytkownik posiada podłączoną drukarkę inną niż domyślna Microsoft
7.	Usługi systemowe – obecny stan, sposób startu
	a.	Usługę Windows Update
	b.	Usługę AppIdSvc
	c.	Usługę Windows Defender
	d.	Usługę Zapory Windows Defender
	e.	Usługę Czasu systemu Windows
8.	Ustawienia Zapory Windows Defender
	a.	Stan zapory
	b.	Rozmiar pliku dziennika
9.	Ustawienia programu Antywirusowego Windows Defender
	a.	Stan programu
	b.	Wykrywanie potencjalnie niechcianych aplikacji
	c.	Skanowanie dysków wymiennych
	d.	Skanuj wszystkie pobierane pliki i załączniki
	e.	Liczbę dni, po upływie której analizy zabezpieczeń dotyczące programów szpiegujących będą uznawane za nieaktualne
	f.	Liczbę dni, po upływie których analiza zabezpieczeń dotycząca wirusów będzie uznawana za nieaktualną
	g.	Monitorowanie zachowania
10.	Ustawienia dziennika zdarzeń dla wszystkich zakresów monitorowania
	a.	Mechanizm tworzenia kopii zapasowych
	b.	Zachowanie dziennika po osiągnięciu maksymalnego rozmiaru
	c.	Maksymalny rozmiar pliku dziennika


Get-CimInstance Win32_LogicalDisk | where-Object { $_.DriveType -eq 3 } | Select @{Name = "VolumeName"; Expression = { $_.VolumeName } },
@{Name = "Size"; Expression = { [Math]::Round( ($_.Size / 1073741824),2) } }, @{Name = "FreeSpace"; Expression = { [Math]::Round(  ($_.FreeSpace / 1073741824),2) }}


#######################TECHNICZNE#######################################
#REQIURES
CARBON-Test-RegistryValue
AD-Get-ADPrincipalGroupMembership
SysInfo-Get-VideoControler


#######################
function Test-RegistryKeyValue
{
    <#
    .SYNOPSIS
    Tests if a registry value exists.
    
    .DESCRIPTION
    The usual ways for checking if a registry value exists don't handle when a value simply has an empty or null value.  This function actually checks if a key has a value with a given name.
    
    .EXAMPLE
    Test-CRegistryKeyValue -Path 'hklm:\Software\Carbon\Test' -Name 'Title'
    
    Returns `True` if `hklm:\Software\Carbon\Test` contains a value named 'Title'.  `False` otherwise.
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]
        # The path to the registry key where the value should be set.  Will be created if it doesn't exist.
        $Path,
        
        [Parameter(Mandatory=$true)]
        [string]
        # The name of the value being set.
        $Name
    )

    if( -not (Test-Path -Path $Path) )
    {
        return $false
    }
    
    $properties = Get-ItemProperty -Path $Path 
    if( -not $properties )
    {
        return $false
    }
    
    $member = Get-Member -InputObject $properties -Name $Name
    if( $member )
    {
        return $true
    }
    else
    {
        return $false
    }
}
function ConvertTo-Hashtable($object)
{
    $hashtable = [ordered]@{}
    $object.psobject.properties | Foreach { $hashtable[$_.Name] = $_.Value }
    $hashtable
}


#######################ROZDZIAŁ 1#######################################
HARDWARE

function Get-ComputerReport 
{
    $computerReport = [ordered]@{
        "Disk"            = Get-DiskDrive | Select-Object Caption, @{Name = "Size"; Expression = { [Math]::Round(($_.Size / 1GB), 2), "GB" -join " " } }
        "Processor"       = Get-Processor | Select-Object Name, @{Name = "TDP"; Expression = { $_.MaxClockSpeed } }
        "Memory"          = Get-PhysicalMemoryArray | Select-Object @{Name = "RAM"; Expression = { ($_.MaxCapacity / 1MB), "GB" -join " " } }
        "VideoController" = Get-VideoController | Where-Object { $_.DeviceId -eq "VideoController1" } | Select-Object Name, @{Name = "RAM"; Expression = { ($_.AdapterRam / 1GB), "GB" -join " " } }
    }

    return $computerReport
}

#######################ROZDZIAŁ 2#######################################TEST!
function Get-QuotaReport 
{
$unitList ="KB", "MB", "GB", "TB", "PB", "EB"
$path="HKLM:\Software\Policies\Microsoft\Windows NT\DiskQuota"
$pathExist=Test-Path -Path $path -PathType Container

if ($pathExist)
{
    $quotaReport = Get-ItemProperty -Path $path | Select-Object Enable, Enforce, Limit, LimitUnits, Threshold, ThresholdUnits
    $quotaReport = [ordered]@{
        "enable"         = $quotaReport.Enable
        "enforce"        = $quotaReport.Enforce 
        "limit"          = $quotaReport.Limit 
        "LimitUnits"     = $unitList[$quotaReport.LimitUnits - 1] 
        "Threshold"      = $quotaReport.Threshold
        "ThresholdUnits" = $unitList[$quotaReport.ThresholdUnits - 1] 
    }
}
else 
{
    $quotaReport = [ordered]@{
        "enable"         ="UNSET" 
        "enforce"        ="UNSET" 
        "limit"          ="UNSET" 
        "LimitUnits"     ="UNSET" 
        "Threshold"      ="UNSET"
        "ThresholdUnits" = "UNSET"
    }
}
return $quotaReport
}
Get-QuotaReport
################################################ROZDZIAŁ 3####################TEST!
function GetSoftwareReport
{
    $paths = "HKLM:\SOFTWARE\Wow6432node\Microsoft\Windows\CurrentVersion\Uninstall", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"


#edge
$edge=Get-ChildItem $paths[0] | Get-ItemProperty | Select-Object DisplayName, Version, InstallDate, Publisher, InstallLocation, EstimatedSizeMB | Where-Object { ($_.DisplayName -like "*Edge*") -and ($_.Publisher -like "*Microsoft*") }
#adobe
$adobe = Get-ChildItem $paths[0] | Get-ItemProperty | Select-Object DisplayName, Version, InstallDate, Publisher, InstallLocation, EstimatedSizeMB | Where-Object { ($_.DisplayName -like "*Adobe Acrobat Reader*") -and ($_.Publisher -like "*Adobe*") }
#7-zip-blad
$zip = Get-ChildItem $paths[1] | Get-ItemProperty | Select-Object DisplayName, Version, InstallDate, Publisher, InstallLocation, EstimatedSizeMB | Where-Object { ($_.DisplayName -like "*7-zip*") -and ($_.Publisher -like "*Igor Pavlov*") }
#Java 8
$java = Get-ChildItem $paths[0] | Get-ItemProperty | Select-Object DisplayName, Version, InstallDate, Publisher, InstallLocation, EstimatedSizeMB | Where-Object { ($_.DisplayName -like "*Java 8*") -and ($_.Publisher -like "*Oracle*") }
#Notepad++
$notepad = Get-ChildItem $paths[0] | Get-ItemProperty | Select-Object DisplayName, Version, InstallDate, Publisher, InstallLocation, EstimatedSizeMB | Where-Object { ($_.DisplayName -like "*Notepad++*") -and ($_.Publisher -like "*Notepad++ Team*") }

$programsList = [ordered]@{
    "7-zip"             = $zip 
    "Foxit Reader"      = $adobe 
    "Notepad++"         = $notepad 
    "Microsoft Edge"    = $edge 
    "Java 8 Update 251" = $java 
}
return $programsList  
}

Get-SoftwareInformation
##############################ROZDZIAŁ 4######################################TEST!
$stopwatch = [System.Diagnostics.Stopwatch]::StartNew()


$stopwatch.Stop()
$stopwatch.Elapsed
function Get-FilesReport
{
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$true,HelpMessage="UserName.",Position=0)]
    [String]$userName,
    [Parameter(Mandatory=$true,HelpMessage="GroupName",Position=1)]
    [String]$groupName,
    [Parameter(Mandatory=$true,HelpMessage="Department",Position=2)]
    [String]$departmentName
)

$filesReport = [ordered]@{
}

if (Test-Path -Path $departmentPath -PathType Container)
{
    $userAccessDepartmentFolder=Get-Item -Path $departmentPath | Get-NTFSEffectiveAccess -Account $userName | select Account, AccessRights, FullName
    $filesReport.Add("DepartmentFolderUserAccess", $userAccessDepartmentFolder)


    $groupAccessDepartmentFolder=Get-Item -Path $departmentPath | Get-NTFSEffectiveAccess -Account $groupName |select Account, AccessRights, FullName
    $filesReport.Add("DepartmentFolderGroupAccess",$groupAccessDepartmentFolder)
    
    $userPath=Join-Path -Path $departmentPath -ChildPath $userName.Substring($userName.IndexOf("\")+1)
    if (Test-Path -Path $userPath -PathType Container)
    {
        $userAccessUserFolder=Get-Item -Path $userPath | Get-NTFSEffectiveAccess -Account $userName | select Account, AccessRights, FullName
        $filesReport.Add("UserFolderUserAccess",$userAccessUserFolder)

        $groupAccessUserfolder=Get-Item -Path $userPath | Get-NTFSEffectiveAccess -Account $groupName |select Account, AccessRights, FullName
        $filesReport.Add("UserFolderGroupAccess",$groupAccessUserfolder)
    }
    else
    {
        $filesReport.Add("UserFolderUserAccess","UNSET")
        $filesReport.Add("UserFolderGroupAccess","UNSET")
    }
}
else
{
    $filesReport.Add("DepartmentFolderUserAccess", "UNSET")
    $filesReport.Add("DepartmentFolderGroupAccess","UNSET")
    $filesReport.Add("UserFolderUserAccess","UNSET")
    $filesReport.Add("UserFolderGroupAccess","UNSET")
}



return $filesReport

}

$user="DOMENA\jnowak"
$groupName="DOMENA\Pracownicy_DP"
$departmentPath="\\SERVER\DP"



Get-FilesReport -UserName $user -GroupName $groupName -DepartmentName $departmentPath
$stopwatch.Stop()
$stopwatch.Elapsed

#############################ROZDZIAŁ 5#######################################TEST W PRACY!


function Get-NetworkInformation
{

    $deviceId=Get-NetAdapter -Physical | Where-Object {$_.Status -eq "Up"} | Select -ExpandProperty DeviceId
    $DHCPStatus=Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$id" | Select-Object -ExpandProperty EnableDHCP

    if ($DHCPStatus -eq 1)
    {
        #Przypisane DHCP
        $networkInfo=Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$deviceId" | Select-Object @{Name="IPAddress";Expression={$_.DhcpIpAddress}},@{Name="SubnetMask";Expression={$_.DHCPSubnetMask}},@{Name="DefaultGateway";Expression={$_.DHCPDefaultGateway}},@{Name="NameServer";Expression={$_.DHCPNameServer}},@{Name="DHCPServer";Expression={$_.DHCPServer}}
    }
    else
    {
        #Przypisane Manualnie
        $networkInfo=Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces\$deviceId" | Select-Object  @{Name="IPAddress";Expression={$_.IPAddress}},@{Name="SubnetMask";Expression={$_.SubnetMask}},@{Name="DefaultGateway";Expression={$_.DefaultGateway}},@{Name="NameServer";Expression={$_.NameServer}},@{Name="DHCPServer";Expression={"UNSET"}}
    }

    $network = [ordered]@{
            IPAddress        = $networkInfo.IPAddress
            SubnetMask       = $networkInfo.SubnetMask
            DefaultGateway   = $networkInfo.DefaultGateway
            NameServer       = $networkInfo.NameServer
            DHCPServer       = $networkInfo.DHCPServer
            }

    return $network
}
Get-NetworkInformation

#############################ROZDZIAŁ 6#########################################DONE!
#Sprawdzic w pracy
function Get-PrintReport
{
    $printer=Get-Printer | Where-Object {(($_.PortName -like "*USB*") -or ($_.PortName -like "192.168.*.*")) -and ($_.DeviceType -eq "Print")} | Select Name,Type,DriverName,PortName,Shared,Published
    $printReport = [ordered]@{}
    foreach ($print in $printer)
    {
        $printReport.Add($print.Name,$print)
    }
    return $printReport
}
############################ROZDZIAŁ 7##########################################DONE!
function Get-ServiceReport 
{
    $services = Get-Service wuauserv, AppIDSvc, WinDefend, mpssvc, W32Time | Select-Object Name, Status, StartType 
    $serviceReport = [ordered]@{
        "AppIDSvc"  = $services[0]
        "mpssvc"    = $services[1] 
        "W32Time"   = $services[2]
        "WinDefend" = $services[3]
        "wuauserv"  = $services[4]  
    }
    return $serviceReport
}

Get-ServiceReport
###############################ROZDZIAŁ 8#####################################DONE!
function Get-FirewallReport 
{
    $firewallReportArray=(Get-NetFirewallProfile -PolicyStore ActiveStore | Select-Object Name, Enabled, @{label = "LogFilePath"; expression = { $_.LogFileName } }, @{label = "LogSize"; expression = { $_.LogMaxSizeKilobytes } })
    $firewallReport = [ordered]@{
        Domain  = $firewallReportArray[0]
        Private = $firewallReportArray[1]
        Public  = $firewallReportArray[2]
    }
    return $firewallReport
}


Get-FirewallReport
###############################ROZDZIAŁ 9######################################TEST!
function Get-DefenderReport
{

    $paths="HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates","HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"

    $defenderReport = [ordered]@{
        "Windows Defender Status"           = $null
        "Potentially Unwanted Apps"         = $null
        "Removable Drives Scanning"         = $null
        "Scan All Files and Attachments"    = $null
        "Security Update days"              = $null
        "Spyware Update Days"               = $null
    }
    
    $status=Get-ItemProperty -Path $paths[1] | Select @{Name="Windows Defender";Expression={$_.DisableAntiSpyware}}
    if (-not ($status -eq 1))
    {
        $defenderReport["Windows Defender Status"]="SET"
    }
    else
    {
        $defenderReport["Windows Defender Status"]="UNSET"
    }

    $status=Get-MpPreference | Select-Object PUAProtection,DisableRemovableDriveScanning,DisableIOAVProtection  #b,c,d 
    if ($status.PUAProtection -eq 0)
    {
        $defenderReport["Potentially Unwanted Apps"]="UNSET"
    }
    elseif ($status.PUAProtection -eq 1)
    {
        $defenderReport["Potentially Unwanted Apps"]="BLOCK"
    }
    elseif ($status.PUAProtection -eq 2)
    {
        $defenderReport["Potentially Unwanted Apps"]="AUDIT"
    }

    if (-not ($status.DisableRemovableDriveScanning -eq "True"))
    {
        $defenderReport["Removable Drives Scanning"]="SET"
    }
    else
    {
        $defenderReport["Removable Drives Scanning"]="UNSET"
    }

    if (-not ($status.DisableIOAVProtection -eq "True"))
    {
        $defenderReport["Scan All Files and Attachments"]="SET"
    }
    else
    {
        $defenderReport["Scan All Files and Attachments"]="UNSET"
    }


    $test=Test-RegistryKeyValue -Path $paths[0] -Name "AVSignatureDue"
    if ($test)
    {
        $defenderElement=Get-ItemProperty -Path $paths[0] | Select-Object @{Name="Security updates days";expression={$_.AVSignatureDue}},@{Name="Spyware update days";expression={$_.ASSignatureDue}}
        $defenderReport["Security Update days"]=$defenderElement."Security updates days"
        $defenderReport["Spyware Update Days"]=$defenderElement."Spyware Update Days"
    }
    else
    {
        $defenderReport["Security Update days"]="UNSET"
        $defenderReport["Spyware Update Days"]="UNSET"
    }

    return $defenderReport
}



Get-DefenderReport

##########################################ROZDZIAŁ 10######################DONE!

function New-LogReport 
{
    $applicationLogResult = Get-WinEvent -ListLog Application | Select-Object LogName, @{label = "MaximumSizeInBytes"; expression = { $_.MaximumSizeInBytes / 1024 } }, LogMode, @{label = "Retention"; expression = { Get-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Application | Select -ExpandProperty Retention } }
    $setupLogResult = Get-WinEvent -ListLog Setup | Select-Object LogName, @{label = "MaximumSizeInBytes"; expression = { $_.MaximumSizeInBytes / 1024 } }, LogMode, @{label = "Retention"; expression = { Get-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Setup | Select -ExpandProperty Retention } }
    $systemLogResult = Get-WinEvent -ListLog System | Select-Object LogName, @{label = "MaximumSizeInBytes"; expression = { $_.MaximumSizeInBytes / 1024 } }, LogMode, @{label = "Retention"; expression = { Get-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\System | Select -ExpandProperty Retention } }
    $securityLogResult = Get-WinEvent -ListLog Security | Select-Object LogName, @{label = "MaximumSizeInBytes"; expression = { $_.MaximumSizeInBytes / 1024 } }, LogMode, @{label = "Retention"; expression = { Get-ItemProperty -Path HKLM:\SOFTWARE\Policies\Microsoft\Windows\EventLog\Security | Select -ExpandProperty Retention } }

    $logReport = [ordered]@{
        Application = $applicationLogResult;
        Setup       = $setupLogResult;
        System      = $systemLogResult;
        Security    = $securityLogResult
    }

    return $logReport
}

(New-LogReport).Setup


###########################################
