############################FUNCTIONS####################################

###########################TOOL FUNCTIONS##############################
function Check-ModulesExistence
{

    $moduleList=Get-Module -Name Carbon,NTFSSecurity,SysInfo | Select -ExpandProperty Name

    $isCarbonExist=$moduleList.Contains("Carbon")
    $isNTFSSecExist=$moduleList.Contains("NTFSSecurity")
    $isSysInfoExist=$moduleList.Contains("SysInfo")

    if (-not($isCarbonExist -and $isNTFSSecExist -AND $isSysInfoExist))
    {
        Install-Module -Name Carbon,NTFSSecurity,SysInfo -AllowClobber -Force
    }

    $moduleList=Get-InstalledModule -Name Carbon,NTFSSecurity,SysInfo | Select -ExpandProperty Name

    $isCarbonExist=$moduleList.Contains("Carbon")
    $isNTFSSecExist=$moduleList.Contains("NTFSSecurity")
    $isSysInfoExist=$moduleList.Contains("SysInfo")

    if (-not($isCarbonExist -and $isNTFSSecExist -AND $isSysInfoExist))
    {
        Import-Module -Name Carbon,NTFSSecurity,SysInfo
    }
}


function Prepare-Workplace
{
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$true,HelpMessage="Path",Position=0)]
    [String]$path,
    [Parameter(Mandatory=$true,HelpMessage="GroupName",Position=1)]
    [String]$folder
)

    New-Item –Path $path –Name $folder -ItemType RegistryKey

    "HARDWARE","QUOTA","SOFTWARE","FILESHARE","NETWORK","PRINTER","SERVICE","FIREWALL","LOG" | foreach-Object {
    New-Item –Path "HKLM:\System\TEST" –Name $_ -ItemType RegistryKey
    }
}

#Prepare-Workplace -path "HKLM:\System" -folder TEST


function Save-ToRegistry2Level
{
    [CmdletBinding()]
    Param(
        [Parameter(Mandatory=$true,HelpMessage="Path",Position=0)]
        [String]$pathToRegistry,
        [Parameter(Mandatory=$true,HelpMessage="DataToSave",Position=1)]
        $hashtableData
    )

    foreach ($dataElement in $hashtableData.Keys) 
    {
        $dataName = $hashtableData[$dataElement]
        $keyPath = Join-Path $pathToRegistry -ChildPath $dataElement
        New-Item -Path $pathToRegistry -Name $dataElement -ItemType RegistryKey
    
        foreach ($property in $dataName.PSObject.Properties) 
        {
            New-ItemProperty -Path $keyPath -Name $property.Name -Value $property.Value -Force
        }
    }
}
#$lama=Get-ComputerReport
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\HARDWARE" -hashtableData $lama


function Save-ToRegistry1Level
{
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$true,HelpMessage="Path",Position=0)]
    [String]$pathToRegistry,
    [Parameter(Mandatory=$true,HelpMessage="DataToSave",Position=1)]
    $hashtableData
)

    foreach ($element in $lama.Keys)
    {
        New-ItemProperty -Path $pathToRegistry -Name $element -Value $lama[$element] -Force
    }
}
#$lama=Get-QuotaReport
#Save-ToRegistry1Level -pathToRegistry "HKLM:\SYSTEM\TEST\QUOTA" -hashtableData $lama


###########################VARIABLES###################################
$monitoredOU="KOMPUTERY"
$computerList=(Get-ADComputer -Filter * -SearchBase 'OU=KOMPUTERY, DC=domena, DC=local').Name
$isConnected=Test-Connection -ComputerName $computerList -Quiet -Count 10

###########################FOR FUNCTIONS###############################
$softwareList = [ordered]@{
    "7-Zip"             = "*Igor Pavlov*" 
    "Adobe"             = "*Adobe*" 
    "Notepad++"         = "*Notepad++ Team*" 
    "Microsoft Edge"    = "*Microsoft*" 
    "Java 8"            = "*Oracle*" 
}

$user="DOMENA\jnowak"
$groupName="DOMENA\Pracownicy_DP"
$departmentPath="\\SERVER\DP"

########################################################################
########################################################################
##                                                                    ##
##                             MAIN                                   ##
##                                                                    ##
########################################################################
########################################################################

#Current State
$gpoLast=Get-ADOrganizationalUnit -Filter {name -eq $monitoredOU} | Select-Object -ExpandProperty distinguishedname | Get-GPInheritance | Select-Object -ExpandProperty gpolinks | ForEach-Object {Get-GPO -Guid $_.gpoid} | Select-Object ModificationTime

while($true)
{
    Read-Host "Change GPO: "
    
    #Get data after change
    $gpoCurrent=Get-ADOrganizationalUnit -Filter {name -eq $monitoredOU} | Select-Object -ExpandProperty distinguishedname | Get-GPInheritance | Select-Object -ExpandProperty gpolinks | ForEach-Object {Get-GPO -Guid $_.gpoid} | Select-Object ModificationTime
    
    #Testing variables
    $isLastExist=[string]::IsNullOrEmpty($gpoLast)
    $isCurrentExist=[string]::IsNullOrEmpty($gpoCurrent)

    if ((-not($isLastExist)) -and (-not($isCurrentExist))) # 11
    {
        $isTimeDifference=Compare-Object -ReferenceObject $gpoLast.ModificationTime -DifferenceObject $gpoCurrent.ModificationTime
        $isTimeExist=[string]::IsNullOrEmpty($isTimeDifference)
        
        if (-not($isTimeExist))
        {
            "Oba są pełne ale się różnią datą modyfikacji-invoke"
        }
        else
        {
            "Oba się pełne i są takie same"
        }

    }
    if ((-not($isLastExist)) -and $isCurrentExist) # 10
    {
        "zmienila sie licznosc -invoke"
    }
    if ($isLastExist -and (-not($isCurrentExist))) # 01
    {
        "zmieniła się licznosc - invoke"
    }
    if ($isLastExist -and $isCurrentExist) # 00
    {
        "Obie są puste - bez zmian"
    }

    $gpoLast=$gpoCurrent 
    Start-Sleep -Seconds 5
}

#############################################################

###VERSION ALPHA

#Prepare-Workplace -path "HKLM:\System" -folder TEST



#$lama=Get-ComputerReport
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\HARDWARE" -hashtableData $lama


#$lama=Get-QuotaReport
#Save-ToRegistry1Level -pathToRegistry "HKLM:\SYSTEM\TEST\QUOTA" -hashtableData $lama


<#
$softwareList = [ordered]@{
    "7-Zip"             = "*Igor Pavlov*" 
    "Adobe"             = "*Adobe*" 
    "Notepad++"         = "*Notepad++ Team*" 
    "Microsoft Edge"    = "*Microsoft*" 
    "Java 8"            = "*Oracle*" 
}

#$lama=Get-SoftwareReport -softwareList $softwareList
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\SOFTWARE" -hashtableData $lama
#>



#$user="DOMENA\jnowak"
#$groupName="DOMENA\Pracownicy_DP"
#$departmentPath="\\SERVER\DP"

#$lama=Get-FilesReport -userName $user -groupName $groupName -departmentName $departmentPath
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\FILESHARE" -hashtableData $lama



#$lama=Get-NetworkInformation
#Save-ToRegistry1Level -pathToRegistry "HKLM:\SYSTEM\TEST\NETWORK" -hashtableData $lama


#$lama=Get-PrintReport
#Save-ToRegistry1Level -pathToRegistry "HKLM:\SYSTEM\TEST\PRINTER" -hashtableData $lama


#$lama=Get-ServiceReport
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\SERVICE" -hashtableData $lama


#$lama=Get-FirewallReport
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\FIREWALL" -hashtableData $lama


#$lama=New-LogReport
#Save-ToRegistry2Level -pathToRegistry "HKLM:\SYSTEM\TEST\LOG" -hashtableData $lama

###########################

function Get-RegistryLevel1Data
{
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$true,HelpMessage="Path",Position=0)]
    [String]$pathToRegistry
)

$networkReportRegistry=[ordered]@{}

$registryData=Get-ItemProperty -Path $pathToRegistry
$registryData.PSObject.Properties | Where-Object {$_.Name -NotLike "PS*"} | ForEach-Object { $networkReportRegistry.Add($_.Name,$_.Value)}

return $networkReportRegistry

}

Get-RegistryLevel1Data -pathToRegistry "HKLM:\SYSTEM\TEST\NETWORK"

function Get-RegistryLevel2Data
{
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$true,HelpMessage="Path",Position=0)]
    [String]$pathToRegistry
)

    $registryValuesHashtable=[ordered]@{}

    $registryKey=Get-ChildItem -Path $pathToRegistry -Name

    foreach($registryKeyElement in $registryKey)
    {
        $internalPathToRegistry=Join-Path -Path $pathToRegistry -ChildPath $registryKeyElement
        $registryValues=Get-RegistryLevel1Data -pathToRegistry $internalPathToRegistry
        $registryValuesHashtable.Add($registryKeyElement,$registryValues)
    
    }
    return $registryValuesHashtable

}

Get-RegistryLevel2Data -pathToRegistry "HKLM:\SYSTEM\TEST\FILESHARE"
